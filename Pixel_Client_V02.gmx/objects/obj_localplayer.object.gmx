<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shadow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize some variables
grav = 1;
spd = 10;
jspd = 12;
hspd = 0;
vspd = 0;
xspd=0;
yspd=0;
state = "standing";
dir = "right";
jumping = false;
falling = false;
fric = 0.7;
walkingAcc = 2.5;
walkingMaxSpd = spd*0.5;
runningAcc = 5;
runningMaxSpd = spd;
terminalVelocity = 50;
animSpeed = 0;
frames=0;

catapult = 0;

legSprite = -1; //used in draw event to attach legs
//legSpriteCurrent = 0; //used to give the id number of legs to the server
//diaperSprite = 0; //same as above but with dips

projectileCount = 0;

//colour = make_colour_rgb(255, 255, 255);

animRight = spr_walkRight;
animLeft = spr_walkLeft;
animDown = spr_walkDown;
animUp = spr_walkUp;

/*
    playerType = global.playerType;
switch(global.playerType)
    {
        case 0: colour = make_colour_rgb(254, 219, 200);
            break;
        case 1: colour = make_colour_rgb(192, 146, 134);
            break;
        case 2: colour = make_colour_rgb(158, 109, 081);
            break;
    }
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "standing";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(catapult == 0)
    {
        scr_detectKey();
        //scr_groundCheck();
        //scr_jumpCheck();
        scr_rightCheck();
        scr_leftCheck();
        scr_downCheck();
        scr_upCheck();
        scr_collisionCheck();
        scr_standCheck();
        //scr_setSprite();
    }
else
    {
        scr_catapult();
    }


if(x &gt; 480 &amp;&amp; x &lt; room_width-480 || room_width &lt;= 960)  // rooms always have control
        {
            view_xview[0] = x-480;
        }
    else
        {
            if(x &lt; 480)
                {
                    view_xview[0] = 0;
                }
            else
                {
                    view_xview[0] = room_width-960;
                }
        }

        
if(y &gt; 270 &amp;&amp; y &lt; room_height-270 || room_height &lt;= 540)  // rooms always have control
        {
            view_yview[0] = y-270;
        }
    else
        {
            if(y &lt; 480)
                {
                    view_yview[0] = 0;
                }
            else
                {
                    view_yview[0] = room_height-540;
                }
        }

depth = -y;


var d = 0;
switch (dir)
{
    case "right":
        d = 1;
        break;
        
    case "left":
        d = 2;
        break;
        
    case "down":
        d = 3;
        break;
        
    case "up":
        d = 4;
        break;
}

//var roomname = room_get_name(room);

//update coordinates
buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, 7);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_f32, x);
buffer_write(global.buffer, buffer_f32, y);
//buffer_write(global.buffer, buffer_u8, sprite_index);
buffer_write(global.buffer, buffer_u8, frames);
buffer_write(global.buffer, buffer_u8, d);
buffer_write(global.buffer, buffer_u32, room);

network_send_packet(obClient.socket, global.buffer, buffer_tell(global.buffer));

//if (keyboard_check(ord("P")))
//above is from Tut, but I wanted Tab instead
if(!global.typing)
{
    if (keyboard_check(vk_tab))
    {
        if (!instance_exists(obj_playerList))
        {
            instance_create(x, y, obj_playerList);
        }
    }
    else
    {
        if (instance_exists(obj_playerList))
        {
            with(obj_playerList)
            {
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xstart;
y = ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx = 0;
var yy = 0;

if(xspd&gt;0) { xx = xspd; }
    else { xx = -xspd; }
if(yspd&gt;0) { yy = yspd; }
    else { yy = -yspd; }

if(xx&gt;yy) { animSpeed += xx; }
    else { animSpeed += yy; }
    

if(animSpeed &lt; 10 ) { frames = 0; }    
    if(animSpeed &gt; 9) { frames = 1; }
    if(animSpeed &gt; 19) { frames = 0; }
    if(animSpeed &gt;29) { frames = 2; }
        
if(state != "standing")
    {
        animSpeed++;
        if(state == "running")
            {
                animSpeed++;
            }
    }
if(animSpeed &gt;= 40) { animSpeed = 0; }

//=============================================================================
//draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
//    ^--  not sure if this is needed since its already inside of scr_avatar()

scr_avatar();
/*
switch(dir)
    {
        case "right":
                    draw_sprite_ext(spr_walkRight, frames, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                    break;
        case "left":
                    draw_sprite_ext(spr_walkLeft, frames, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                    break;
        case "down":
                    draw_sprite_ext(spr_walkDown, frames, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                    break;
        case "up":
                    draw_sprite_ext(spr_walkUp, frames, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                    break;
    }
*/


/*
switch(frames)
{
    case 1:
        switch(dir)
        {
            case "right":
                draw_sprite_ext(spr_babLegs, 2, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                break;
            case "left":
                
                break;
            case "down":
                
                break;
            case "up":
                
                break;
        }
        break;
        
    case 2:
        
        break;
}

switch(legSprite)
{
    case -2: //jump legs
        draw_sprite_ext(spr_babLegs, 2, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
        legSpriteCurrent = 2;
        break;
    case -1: //stand legs
        draw_sprite_ext(spr_babLegs, 0, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
        legSpriteCurrent = 0;
        break;
    default: //walking
        legSprite++;
        if(legSprite &lt; 20)
        {
                if(legSprite &gt; 8)
                    {
                        draw_sprite_ext(spr_babLegs, 1, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                        legSpriteCurrent = 1;
                            if(legSprite &gt; 15) 
                                {
                                    legSprite = 0;
                                }
                    }
                else
                    {
                        draw_sprite_ext(spr_babLegs, 0, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                        legSpriteCurrent = 0;
                    }
        }
        else
        {
                if(legSprite &gt; 25)
                    {
                        draw_sprite_ext(spr_babLegs, 1, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                        legSpriteCurrent = 1;
                            if(legSprite &gt; 29) 
                                {
                                    legSprite = 20; 
                                }
                    }
                else
                    {
                        draw_sprite_ext(spr_babLegs, 0, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
                        legSpriteCurrent = 0;
                    }
        }
        break;
}

//draw the diaper
//subimage is just 0 until I add more
draw_sprite_ext(spr_babDiaper, 0, x, y, image_xscale, image_yscale, image_angle, colour, image_alpha);
*/
//draw the torso

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="36">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="34">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_next(room) != -1
   {
   room_goto(room_next(room));
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_previous(room) != -1
   {
   room_goto(room_previous(room));
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tell the server we're leaving the game room


//destroys any remote players to prevent callbacks
with (obj_remoteplayer)
   {
    instance_destroy();
   }

buffer_seek(global.buffer, buffer_seek_start, 0);//seek to the beginning of the read buffer
buffer_write(global.buffer, buffer_u8, 6);//write a tag to the global write buffer
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_u8, global.playerType);
buffer_write(global.buffer, buffer_u8, 0);
network_send_packet(obClient.socket, global.buffer, buffer_tell(global.buffer));

global.typing = false;
global.inGame = 0;

room_goto(rm_mainMenu);

//audio_stop_sound(snd_house);
audio_stop_all();
audio_play_sound(snd_lobby, 10, true);

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

if (state = "standing" &amp;&amp; !jumping &amp;&amp; !falling)
{
    state = "throwing"
    alarm[0] = room_speed * 0.25;
    
    var xx = x;
    var yy = y - 10;
    
    if (dir == "right")
    {
        xx = x + 26;        
    }
    else
    {
        xx = x - 26;
    }
    
    var proj = instance_create(xx, yy, obj_projectile);
    proj.speed = 8;
    if ( dir == "right")
        {
        proj.direction = 0;
        }
    else
        {
        proj.direction = 180;
        }
    proj.owner = global.playerId;
    projectileCount++;
    proj.projectileId = projectileCount;
    
    
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, 11);
    buffer_write(global.buffer, buffer_u32, global.playerId);
    buffer_write(global.buffer, buffer_u32, projectileCount);
    buffer_write(global.buffer, buffer_f32, xx);
    buffer_write(global.buffer, buffer_f32, yy);
    network_send_packet(obClient.socket, global.buffer, buffer_tell(global.buffer));
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
