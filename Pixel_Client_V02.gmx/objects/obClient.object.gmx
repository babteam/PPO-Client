<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the client

global.version = 2;
global.devControls = 0;

network_set_config(network_config_connect_timeout, 5000);

socket = network_create_socket(network_socket_tcp);
ip = global.ipChoose;

isConnected = network_connect(socket, ip, 8000);
    if(isConnected &lt; 0)
        {
            room_goto(rm_chooseServer);
            instance_destroy();
            scr_showNotification("Server offline!");
        }
    else
        {
            scr_showNotification("Client initialized!");
        }
global.buffer = buffer_create(1024, buffer_fixed, 1);
global.latency = 0;

global.typing = false;
global.inGame = 0;

global.playerType = 0;

maxWidth = 600;
blink = false;
text = "";

alarm[1] = room_speed * 5;


//var type = network_socket_tcp;
//var ip = "192.168.0.10";
//var port = 8000;
//socket = network_create_socket(type);
//connection = network_connect(socket, ip, port);

//var size = 1024;
//var type = buffer_fixed;
//var alignment = 1;
//buffer = buffer_create(size, type, alignment);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tell the server what out latency is
buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, 10);
buffer_write(global.buffer, buffer_u32, global.latency);
network_send_packet(socket, global.buffer, buffer_tell(global.buffer));

alarm[1] = room_speed * 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blink = !blink;

if(global.typing)
{
    alarm[0] = room_speed * 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update latency
buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, 1);
buffer_write(global.buffer, buffer_u32, current_time);
network_send_packet(socket, global.buffer, buffer_tell(global.buffer));  // send packet to server
                                                                        //server is stored in socket
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventType = ds_map_find_value(async_load, "type");
switch(eventType)
{
//====================================================================
    case network_type_data:
        var buffer = ds_map_find_value(async_load, "buffer");
        buffer_seek(buffer, buffer_seek_start, 0);
        scr_handleIncomingPackets(buffer);
    break;



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tell other players to delete player model
buffer_seek(global.buffer, buffer_seek_start, 0);//seek to the beginning of the read buffer
buffer_write(global.buffer, buffer_u8, 5);//write a tag to the global write buffer
buffer_write(global.buffer, buffer_u32, global.playerId);
network_send_packet(obClient.socket, global.buffer, buffer_tell(global.buffer));

// this should properly update all clients
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the socket and the buffer
network_destroy(socket);
buffer_delete(global.buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_font(fnt_main);
draw_set_colour(c_white);
//draw_text(20, 20, "Latecy: " + string(global.latency));
// latency is in Tab menu now

if (global.inGame == 1)
{
    draw_set_halign(fa_left);
    draw_set_font(fnt_chat);
    
    if (global.typing)
    {
        if (!blink)
        {
            draw_text(10, 460, "You: " + text);
        }
        else
        {
            draw_text(10, 460, "You: " + text + "|");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.devControls++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.inGame == 1)
{
    if (global.typing)
    {
        if (text != "")
        {
            //send our message
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, 8);
            buffer_write(global.buffer, buffer_u32, global.playerId);
            buffer_write(global.buffer, buffer_string, text);
            network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
            
            global.typing = false;
            
            var chat = instance_create(x, y, obj_chat);
            chat.text = text;
            chat.owner = obj_localplayer.id;
            
            text = "";
        }
        else
            {
                //close chat if enter while empty
                global.typing = false;
            }
    }
    else
    {
        keyboard_string = text;
        global.typing = true;
        alarm[0] = room_speed * 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.typing)
{
    if (string_width(keyboard_string) &lt; maxWidth)
    {
        text = keyboard_string;
    }
    else
    {
        keyboard_string = text;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
